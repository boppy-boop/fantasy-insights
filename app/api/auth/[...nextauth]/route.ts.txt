import NextAuth, { AuthOptions } from "next-auth"

// Helper: builds base64 for Yahoo token exchange
function basicAuth() {
  const id = process.env.YAHOO_CLIENT_ID!
  const secret = process.env.YAHOO_CLIENT_SECRET!
  return Buffer.from(`${id}:${secret}`).toString("base64")
}

// Refresh token if expired
async function refreshAccessToken(token: any) {
  try {
    const res = await fetch("https://api.login.yahoo.com/oauth2/get_token", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        Authorization: `Basic ${basicAuth()}`,
      },
      body: new URLSearchParams({
        grant_type: "refresh_token",
        refresh_token: token.refresh_token as string,
      }),
    })

    const refreshed = await res.json()
    if (!res.ok) throw refreshed

    return {
      ...token,
      access_token: refreshed.access_token,
      expires_at: Math.floor(Date.now() / 1000) + (refreshed.expires_in ?? 3600),
      refresh_token: refreshed.refresh_token ?? token.refresh_token,
    }
  } catch (e) {
    console.error("Yahoo refresh error", e)
    return { ...token, error: "RefreshAccessTokenError" as const }
  }
}

export const authOptions: AuthOptions = {
  providers: [
    {
      id: "yahoo",
      name: "Yahoo",
      type: "oauth",
      authorization: {
        url: "https://api.login.yahoo.com/oauth2/request_auth",
        params: {
          scope: "fspt-r profile email", // read-only fantasy + profile info
          response_type: "code",
          redirect_uri: process.env.YAHOO_REDIRECT_URI!,
        },
      },
      token: { url: "https://api.login.yahoo.com/oauth2/get_token" },
      userinfo: { url: "https://api.login.yahoo.com/openid/v1/userinfo" },
      clientId: process.env.YAHOO_CLIENT_ID!,
      clientSecret: process.env.YAHOO_CLIENT_SECRET!,
      profile(profile) {
        return {
          id: profile.sub,
          name: profile.name || profile.nickname || "Yahoo User",
          email: profile.email,
          image: profile.picture,
        }
      },
    } as any,
  ],
  session: { strategy: "jwt" },
  callbacks: {
    async jwt({ token, account }) {
      // First login
      if (account?.access_token) {
        return {
          ...token,
          access_token: account.access_token,
          refresh_token: account.refresh_token,
          expires_at: Math.floor(Date.now() / 1000) + (account.expires_in ?? 3600),
        }
      }
      // Not expired â†’ return token
      if (token.expires_at && Date.now() / 1000 < (token.expires_at as number)) {
        return token
      }
      // Else refresh
      return await refreshAccessToken(token)
    },
    async session({ session, token }) {
      (session as any).access_token = token.access_token
      return session
    },
  },
}

const handler = NextAuth(authOptions)
export { handler as GET, handler as POST }